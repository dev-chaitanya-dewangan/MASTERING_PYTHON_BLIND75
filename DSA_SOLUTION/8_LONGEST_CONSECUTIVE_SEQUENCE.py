def longestConsecutiveSequece(nums):
    # CONVERTS INTO SET TO AVOID DUPLICATES 
    numSet=set(nums)
    #LONGEST TRACKS LONGEST SEEN LONGEST COSNECUTIVE NUMBER
    longest=0
    # LOOP THOUGH ALL NUMBER 
    for i in nums:
        # IF PREVIOUS DOESNT EXIT IN SET(numSet) THEN DEFINE "length" WITH VALUE OF 0
        if (i-1) not in numSet:
            # print("(i-1)",i)
            length=0
            # RUN LOOP AND INCREMENT LENGTH UNTIL WONT FIND ANY MORE CONSECUTIVE NUMBER 
            while (i + length) in numSet: 
                length+=1
            #COMPARE LENGTH LONGEST AND CHANGE IF LENGTH I FMORE THAN LENGTH 
            longest=max(length,longest)
    return longest
print(longestConsecutiveSequece([9,8,4,3,7,4,4,4,4,]))

"""
TIME COMPLEXITY  ->O(N)
SPACE COMPLEXITY ->O(N)
"""

"""
METHOD TO SOLVE THIS :
CHECK IF NOT -> CURRENT NUMBER HAVE ANY PREVIOUS(n-1) PRESENT IN SET
THEN CHECK IF EXACTLY GREATER THAN ONE PRESENT IN SET UNTIL LONGEST CONSECUTIVE NUMBER
RETURN LONGEST NUMBER

-------------------------------------------------------------
1.DEFINE NUMSET,LONGEST WITH VALUE OF 0 
2.LOOP THOUGH EVERY NUMBER IN GIVEN LIST AND CHECK IF CURRENT VALUE'S PREVIUOS PRESENT
IN  SET(numSet)    
3.DEFINE LENGTH ->WHICH TRACKS ALL CURRENT NUMBERS CONSECUTIVE LENGTH
4.LOOP UNTIL WE WONT FIND ANY MORE CONSECUTIVE NUMBER PRESENT  IN SET(numSet)
5.COMPARE THE LONGEST NUMBER WITH CURRENT LENGTH(WHICH IS TRACK OF CONSECUTIVE NUMBER)
6.RETURN LONGEST
"""
